name: Usage Guardian (CSharp Script)

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: usage-guardian-csx
  cancel-in-progress: true

env:
  SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}

jobs:
  guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract parameters and thresholds
        id: extract-params
        run: |
          NAME_PREFIX=$(jq -r '.parameters.namePrefix.value' infra/parameters.json)
          ENVIRONMENT=$(echo "$NAME_PREFIX" | sed 's/.*-//')
          echo "BASE_NAME_PREFIX=$NAME_PREFIX" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=rg-$NAME_PREFIX" >> $GITHUB_ENV
          echo "APP_NAME=${NAME_PREFIX}-app" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

          # Extract threshold values from thresholds.json
          echo "BUDGET_VCPU_SECONDS=$(jq -r '.budgets.vcpuSeconds' infra/thresholds.json)" >> $GITHUB_ENV
          echo "BUDGET_GIB_SECONDS=$(jq -r '.budgets.gibSeconds' infra/thresholds.json)" >> $GITHUB_ENV
          echo "BUDGET_REQUESTS=$(jq -r '.budgets.requests' infra/thresholds.json)" >> $GITHUB_ENV
          echo "BUDGET_DATA_GB=$(jq -r '.budgets.dataGb' infra/thresholds.json)" >> $GITHUB_ENV
          echo "WARN_PCT=$(jq -r '.thresholds.warnPercent' infra/thresholds.json)" >> $GITHUB_ENV
          echo "STOP_PCT=$(jq -r '.thresholds.stopPercent' infra/thresholds.json)" >> $GITHUB_ENV
          echo "REMAIN_STOP_PCT=$(jq -r '.thresholds.remainStopPercent // ""' infra/thresholds.json)" >> $GITHUB_ENV
          echo "REMAIN_WARN_PCT=$(jq -r '.thresholds.remainWarnPercent // ""' infra/thresholds.json)" >> $GITHUB_ENV
          echo "COSMOS_FREE_STORAGE_GB=$(jq -r '.cosmos.freeStorageGb' infra/thresholds.json)" >> $GITHUB_ENV
          echo "COSMOS_WARN_STORAGE_PCT=$(jq -r '.cosmos.warnStoragePercent' infra/thresholds.json)" >> $GITHUB_ENV
          echo "COSMOS_STOP_STORAGE_PCT=$(jq -r '.cosmos.stopStoragePercent' infra/thresholds.json)" >> $GITHUB_ENV

          # Predict Cosmos DB account name from Bicep pattern
          RESOURCE_GROUP="rg-${NAME_PREFIX}"
          echo "COSMOS_ACCOUNT_NAME=${NAME_PREFIX}-cosmos" >> $GITHUB_ENV
          echo "COSMOS_RESOURCE_GROUP=${RESOURCE_GROUP}" >> $GITHUB_ENV
          echo "COSMOS_SUBSCRIPTION_ID=${{ env.SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "COSMOS_DATABASE_NAME=FestivalManagement" >> $GITHUB_ENV
          echo "COSMOS_COLLECTION_NAMES=TextKeyValues,ImageKeyValues" >> $GITHUB_ENV
          echo "COSMOS_PROVISIONING=vCore" >> $GITHUB_ENV

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.CLIENT_ID }}
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install dotnet-script tool
        run: dotnet tool install -g dotnet-script

      - name: Run usage guardian script
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet script scripts/usage-guardian.csx




