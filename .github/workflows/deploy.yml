name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract subscription ID from Azure credentials
      env:
        AZURE_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        SUBSCRIPTION_ID=$(echo "$AZURE_CREDS" | jq -r '.subscriptionId')
        echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV

    - name: Extract parameters for resource group creation
      id: extract-params
      run: |
        NAME_PREFIX=$(jq -r '.parameters.namePrefix.value' infra/parameters.json)
        LOCATION=$(jq -r '.parameters.location.value' infra/parameters.json)

        # Validate required parameters
        if [ -z "$NAME_PREFIX" ] || [ "$NAME_PREFIX" = "null" ]; then
          echo "Error: namePrefix is required in parameters.json"
          exit 1
        fi
        if [ -z "$LOCATION" ] || [ "$LOCATION" = "null" ]; then
          echo "Error: location is required in parameters.json"
          exit 1
        fi

        REGISTRY_REPOSITORY=$(jq -r '.parameters.containerRegistryRepository.value // empty' infra/parameters.json 2>/dev/null)
        REGISTRY_SERVER=$(jq -r '.parameters.containerRegistryServer.value // empty' infra/parameters.json 2>/dev/null)
        if [ "$REGISTRY_REPOSITORY" = "null" ]; then
          REGISTRY_REPOSITORY=""
        fi
        if [ -z "$REGISTRY_REPOSITORY" ]; then
          REGISTRY_REPOSITORY="${GITHUB_REPOSITORY}"
          REGISTRY_REPOSITORY=$(echo "$REGISTRY_REPOSITORY" | tr '[:upper:]' '[:lower:]')
        fi
        if [ "$REGISTRY_SERVER" = "null" ] || [ -z "$REGISTRY_SERVER" ]; then
          REGISTRY_SERVER="ghcr.io"
        fi

        IMAGE_NAME="${NAME_PREFIX}-app"

        echo "name-prefix=$NAME_PREFIX" >> $GITHUB_OUTPUT
        echo "location=$LOCATION" >> $GITHUB_OUTPUT
        echo "resource-group=rg-${NAME_PREFIX}" >> $GITHUB_OUTPUT
        echo "container-registry-repository=$REGISTRY_REPOSITORY" >> $GITHUB_OUTPUT
        echo "container-registry-server=$REGISTRY_SERVER" >> $GITHUB_OUTPUT
        echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ steps.extract-params.outputs.resource-group }} \
          --location ${{ steps.extract-params.outputs.location }}

    - name: Create secrets JSON from app secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        if [ -z "$APP_SECRETS_JSON" ]; then
          echo "Error: APP_SECRETS secret is not set"
          exit 1
        fi
        echo "$APP_SECRETS_JSON" > infra/secrets.json

        # Validate JSON structure
        if ! jq -e '.googleClientId' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientId'"
          exit 1
        fi
        if ! jq -e '.googleClientSecret' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientSecret'"
          exit 1
        fi
        if ! jq -e '.initialUserEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'initialUserEmail'"
          exit 1
        fi
        if ! jq -e '.mongoAdminPassword' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'mongoAdminPassword'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorName' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorName'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorEmail'"
          exit 1
        fi
        if ! jq -e '.gitSettings.token' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.token'"
          exit 1
        fi
        if ! jq -e '.gitSettings.cloneUrl' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.cloneUrl'"
          exit 1
        fi
        echo "All required secrets validated"

    - name: Extract secrets for Bicep parameters
      id: extract-secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        echo "google-client-id=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientId')" >> $GITHUB_OUTPUT
        echo "google-client-secret=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientSecret')" >> $GITHUB_OUTPUT
        echo "initial-user-email=$(echo "$APP_SECRETS_JSON" | jq -r '.initialUserEmail')" >> $GITHUB_OUTPUT
        echo "mongo-admin-password=$(echo "$APP_SECRETS_JSON" | jq -r '.mongoAdminPassword')" >> $GITHUB_OUTPUT
        echo "git-author-name=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorName')" >> $GITHUB_OUTPUT
        echo "git-author-email=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorEmail')" >> $GITHUB_OUTPUT
        echo "git-token=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.token')" >> $GITHUB_OUTPUT
        echo "git-clone-url=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.cloneUrl')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker build -f FestivalManagementWeb/Dockerfile -t ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} .

    - name: Login to container registry
      run: |
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        if [ "$REGISTRY" = "ghcr.io" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "$REGISTRY" --username "${{ github.actor }}" --password-stdin
        else
          echo "Error: Only GHCR (ghcr.io) is supported as container registry"
          exit 1
        fi

    - name: Push Docker image
      run: |
        REPOSITORY="${{ steps.extract-params.outputs.container-registry-repository }}"
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        TARGET_IMAGE="$REGISTRY/$REPOSITORY"
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:${{ github.sha }}
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:latest
        docker push $TARGET_IMAGE:${{ github.sha }}
        docker push $TARGET_IMAGE:latest

    - name: Deploy infrastructure (Cosmos DB + Environment)
      uses: azure/arm-deploy@v2
      id: deploy-infrastructure
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ steps.extract-params.outputs.resource-group }}
        template: infra/infrastructure.bicep
        parameters: >
          namePrefix=${{ steps.extract-params.outputs.name-prefix }}
          location=${{ steps.extract-params.outputs.location }}
          mongoAdminPassword=${{ steps.extract-secrets.outputs.mongo-admin-password }}
        deploymentName: infra-${{ github.run_number }}-${{ github.run_attempt }}
        failOnStdErr: false

    - name: Deploy application (Container App)
      uses: azure/arm-deploy@v2
      id: deploy-application
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ steps.extract-params.outputs.resource-group }}
        template: infra/application.bicep
        parameters: >
          containerAppName=${{ steps.extract-params.outputs.image-name }}
          location=${{ steps.extract-params.outputs.location }}
          environmentId=${{ steps.deploy-infrastructure.outputs.environmentId }}
          cosmosDbAccountName=${{ steps.deploy-infrastructure.outputs.cosmosDbAccountName }}
          imageTag=latest
          containerRegistryServer=${{ steps.extract-params.outputs.container-registry-server }}
          containerRegistryRepository=${{ steps.extract-params.outputs.container-registry-repository }}
          googleClientId=${{ steps.extract-secrets.outputs.google-client-id }}
          googleClientSecret=${{ steps.extract-secrets.outputs.google-client-secret }}
          initialUserEmail=${{ steps.extract-secrets.outputs.initial-user-email }}
          mongoAdminPassword=${{ steps.extract-secrets.outputs.mongo-admin-password }}
          gitAuthorName=${{ steps.extract-secrets.outputs.git-author-name }}
          gitAuthorEmail=${{ steps.extract-secrets.outputs.git-author-email }}
          gitToken=${{ steps.extract-secrets.outputs.git-token }}
          gitCloneUrl=${{ steps.extract-secrets.outputs.git-clone-url }}
          subscriptionId=${{ env.SUBSCRIPTION_ID }}
          resourceGroupName=${{ steps.extract-params.outputs.resource-group }}
        deploymentName: app-${{ github.run_number }}-${{ github.run_attempt }}
        failOnStdErr: false

    - name: Get deployment outputs
      id: get-outputs
      run: |
        CONTAINER_APP_URL="${{ steps.deploy-application.outputs.containerAppUrl }}"
        PRINCIPAL_ID="${{ steps.deploy-application.outputs.containerAppPrincipalId }}"

        echo "Container App URL: $CONTAINER_APP_URL"
        echo "Principal ID: $PRINCIPAL_ID"

        echo "containerAppUrl=$CONTAINER_APP_URL" >> $GITHUB_OUTPUT
        echo "principalId=$PRINCIPAL_ID" >> $GITHUB_OUTPUT

    - name: Assign roles to Container App managed identity
      continue-on-error: true
      run: |
        PRINCIPAL_ID="${{ steps.get-outputs.outputs.principalId }}"
        RESOURCE_GROUP="${{ steps.extract-params.outputs.resource-group }}"

        if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "null" ]; then
          echo "Warning: Principal ID not found, skipping role assignments"
          exit 0
        fi

        echo "Waiting for managed identity to propagate..."
        sleep 30

        echo "Assigning Reader role..."
        az role assignment create \
          --assignee "$PRINCIPAL_ID" \
          --role "Reader" \
          --scope "/subscriptions/${{ env.SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP" \
          2>&1 | grep -v "already exists" || true

        echo "Assigning Monitoring Reader role..."
        az role assignment create \
          --assignee "$PRINCIPAL_ID" \
          --role "Monitoring Reader" \
          --scope "/subscriptions/${{ env.SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP" \
          2>&1 | grep -v "already exists" || true

        echo "Assigning Cost Management Reader role..."
        az role assignment create \
          --assignee "$PRINCIPAL_ID" \
          --role "Cost Management Reader" \
          --scope "/subscriptions/${{ env.SUBSCRIPTION_ID }}" \
          2>&1 | grep -v "already exists" || true

        echo "Role assignments completed"

    - name: Cleanup secrets
      if: always()
      run: rm -f infra/secrets.json

    - name: Output application URL
      run: |
        echo "Application deployed to: ${{ steps.get-outputs.outputs.containerAppUrl }}"

