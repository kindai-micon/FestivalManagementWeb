name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - release
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure federated identity credentials for OIDC
      env:
        AZURE_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        CLIENT_ID=$(echo "$AZURE_CREDS" | jq -r '.clientId')

        echo "Setting up federated credential for master branch..."
        az ad app federated-credential create \
          --id "$CLIENT_ID" \
          --parameters "{\"name\":\"github-actions-master\",\"issuer\":\"https://token.actions.githubusercontent.com\",\"subject\":\"repo:${{ github.repository }}:ref:refs/heads/master\",\"audiences\":[\"api://AzureADTokenExchange\"]}" \
          2>&1 | grep -v "already exists" || echo "Federated credential for master already exists or created"

        echo "Setting up federated credential for release branch..."
        az ad app federated-credential create \
          --id "$CLIENT_ID" \
          --parameters "{\"name\":\"github-actions-release\",\"issuer\":\"https://token.actions.githubusercontent.com\",\"subject\":\"repo:${{ github.repository }}:ref:refs/heads/release\",\"audiences\":[\"api://AzureADTokenExchange\"]}" \
          2>&1 | grep -v "already exists" || echo "Federated credential for release already exists or created"

        echo "✅ Federated identity credentials configured"

    - name: Extract subscription ID from Azure credentials
      env:
        AZURE_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        SUBSCRIPTION_ID=$(echo "$AZURE_CREDS" | jq -r '.subscriptionId')
        echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV

    - name: Extract parameters for resource group creation
      id: extract-params
      env:
        NAME_PREFIX_OVERRIDE: ${{ vars.NAME_PREFIX || '' }}
        LOCATION_OVERRIDE: ${{ vars.LOCATION || '' }}
      run: |
        # Use environment variable if set, otherwise read from parameters.json
        if [ -n "$NAME_PREFIX_OVERRIDE" ]; then
          NAME_PREFIX="$NAME_PREFIX_OVERRIDE"
          echo "Using NAME_PREFIX from environment variable: $NAME_PREFIX"
        else
          NAME_PREFIX=$(jq -r '.parameters.namePrefix.value' infra/parameters.json)
          echo "Using NAME_PREFIX from parameters.json: $NAME_PREFIX"
        fi

        if [ -n "$LOCATION_OVERRIDE" ]; then
          LOCATION="$LOCATION_OVERRIDE"
          echo "Using LOCATION from environment variable: $LOCATION"
        else
          LOCATION=$(jq -r '.parameters.location.value' infra/parameters.json)
          echo "Using LOCATION from parameters.json: $LOCATION"
        fi

        # Validate required parameters
        if [ -z "$NAME_PREFIX" ] || [ "$NAME_PREFIX" = "null" ]; then
          echo "Error: namePrefix is required in parameters.json"
          exit 1
        fi
        if [ -z "$LOCATION" ] || [ "$LOCATION" = "null" ]; then
          echo "Error: location is required in parameters.json"
          exit 1
        fi

        REGISTRY_REPOSITORY=$(jq -r '.parameters.containerRegistryRepository.value // empty' infra/parameters.json 2>/dev/null)
        REGISTRY_SERVER=$(jq -r '.parameters.containerRegistryServer.value // empty' infra/parameters.json 2>/dev/null)
        if [ "$REGISTRY_REPOSITORY" = "null" ]; then
          REGISTRY_REPOSITORY=""
        fi
        if [ -z "$REGISTRY_REPOSITORY" ]; then
          REGISTRY_REPOSITORY="${GITHUB_REPOSITORY}"
          REGISTRY_REPOSITORY=$(echo "$REGISTRY_REPOSITORY" | tr '[:upper:]' '[:lower:]')
        fi
        if [ "$REGISTRY_SERVER" = "null" ] || [ -z "$REGISTRY_SERVER" ]; then
          REGISTRY_SERVER="ghcr.io"
        fi

        IMAGE_NAME="${NAME_PREFIX}-app"
        echo "name-prefix=$NAME_PREFIX" >> $GITHUB_OUTPUT
        echo "location=$LOCATION" >> $GITHUB_OUTPUT
        echo "resource-group=rg-${NAME_PREFIX}" >> $GITHUB_OUTPUT
        echo "container-registry-repository=$REGISTRY_REPOSITORY" >> $GITHUB_OUTPUT
        echo "container-registry-server=$REGISTRY_SERVER" >> $GITHUB_OUTPUT
        echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ steps.extract-params.outputs.resource-group }} \
          --location ${{ steps.extract-params.outputs.location }}

    - name: Create secrets JSON from app secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        if [ -z "$APP_SECRETS_JSON" ]; then
          echo "Error: APP_SECRETS secret is not set"
          exit 1
        fi
        echo "$APP_SECRETS_JSON" > infra/secrets.json

        # Validate JSON structure
        if ! jq -e '.googleClientId' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientId'"
          exit 1
        fi
        if ! jq -e '.googleClientSecret' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientSecret'"
          exit 1
        fi
        if ! jq -e '.initialUserEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'initialUserEmail'"
          exit 1
        fi
        if ! jq -e '.mongoAdminPassword' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'mongoAdminPassword'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorName' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorName'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorEmail'"
          exit 1
        fi
        if ! jq -e '.gitSettings.token' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.token'"
          exit 1
        fi
        if ! jq -e '.gitSettings.cloneUrl' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.cloneUrl'"
          exit 1
        fi
        echo "All required secrets validated"

    - name: Extract secrets for Bicep parameters
      id: extract-secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        echo "google-client-id=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientId')" >> $GITHUB_OUTPUT
        echo "google-client-secret=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientSecret')" >> $GITHUB_OUTPUT
        echo "initial-user-email=$(echo "$APP_SECRETS_JSON" | jq -r '.initialUserEmail')" >> $GITHUB_OUTPUT
        echo "mongo-admin-password=$(echo "$APP_SECRETS_JSON" | jq -r '.mongoAdminPassword')" >> $GITHUB_OUTPUT
        echo "git-author-name=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorName')" >> $GITHUB_OUTPUT
        echo "git-author-email=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorEmail')" >> $GITHUB_OUTPUT
        echo "git-token=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.token')" >> $GITHUB_OUTPUT
        echo "git-clone-url=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.cloneUrl')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker build --no-cache -f FestivalManagementWeb/Dockerfile -t ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} .

    - name: Login to container registry
      run: |
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        if [ "$REGISTRY" = "ghcr.io" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "$REGISTRY" --username "${{ github.actor }}" --password-stdin
        else
          echo "Error: Only GHCR (ghcr.io) is supported as container registry"
          exit 1
        fi

    - name: Push Docker image
      run: |
        REPOSITORY="${{ steps.extract-params.outputs.container-registry-repository }}"
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        TARGET_IMAGE="$REGISTRY/$REPOSITORY"
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:${{ github.sha }}
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:latest
        docker push $TARGET_IMAGE:${{ github.sha }}
        docker push $TARGET_IMAGE:latest

    - name: Make package public (if GH_PAT configured)
      run: |
        if [ -z "${{ secrets.GH_PAT }}" ]; then
          echo "⚠️  GH_PAT secret not configured - skipping package visibility update"
          exit 0
        fi

        REPO_FULL="${{ steps.extract-params.outputs.container-registry-repository }}"
        OWNER=$(echo "$REPO_FULL" | cut -d'/' -f1)
        PACKAGE_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)

        echo "Setting package visibility to public..."

        # Try organization first, then user
        if curl -s -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME" \
          -d '{"visibility":"public"}' | grep -q '"visibility":"public"'; then
          echo "✅ Package set to public (organization)"
        elif curl -s -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" \
          -d '{"visibility":"public"}' | grep -q '"visibility":"public"'; then
          echo "✅ Package set to public (user)"
        else
          echo "⚠️  Could not set package visibility automatically"
        fi

    - name: Deploy all resources using main.bicep
      id: deploy-all
      env:
        NAME_PREFIX: ${{ steps.extract-params.outputs.name-prefix }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
        LOCATION: ${{ steps.extract-params.outputs.location }}
        CONTAINER_REGISTRY_SERVER: ${{ steps.extract-params.outputs.container-registry-server }}
        CONTAINER_REGISTRY_REPOSITORY: ${{ steps.extract-params.outputs.container-registry-repository }}
        CONTAINER_REGISTRY_USERNAME: ${{ github.actor }}
        CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        GOOGLE_CLIENT_ID: ${{ steps.extract-secrets.outputs.google-client-id }}
        GOOGLE_CLIENT_SECRET: ${{ steps.extract-secrets.outputs.google-client-secret }}
        INITIAL_USER_EMAIL: ${{ steps.extract-secrets.outputs.initial-user-email }}
        GIT_AUTHOR_NAME: ${{ steps.extract-secrets.outputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ steps.extract-secrets.outputs.git-author-email }}
        GIT_TOKEN: ${{ steps.extract-secrets.outputs.git-token }}
        GIT_CLONE_URL: ${{ steps.extract-secrets.outputs.git-clone-url }}
        MONGO_ADMIN_PASSWORD: ${{ steps.extract-secrets.outputs.mongo-admin-password }}
      run: |
        set -euo pipefail

        REGISTRY_USERNAME_LOWER=$(echo "$CONTAINER_REGISTRY_USERNAME" | tr '[:upper:]' '[:lower:]')

        echo "Deploying all resources with main.bicep..."
        az deployment group create \
          --name "main-${{ github.run_number }}-${{ github.run_attempt }}" \
          --resource-group "$RESOURCE_GROUP" \
          --template-file infra/main.bicep \
          --parameters \
            namePrefix="$NAME_PREFIX" \
            location="$LOCATION" \
            imageTag="latest" \
            containerRegistryServer="$CONTAINER_REGISTRY_SERVER" \
            containerRegistryRepository="$CONTAINER_REGISTRY_REPOSITORY" \
            containerRegistryUsername="$REGISTRY_USERNAME_LOWER" \
            containerRegistryPassword="$CONTAINER_REGISTRY_PASSWORD" \
            googleClientId="$GOOGLE_CLIENT_ID" \
            googleClientSecret="$GOOGLE_CLIENT_SECRET" \
            initialUserEmail="$INITIAL_USER_EMAIL" \
            gitAuthorName="$GIT_AUTHOR_NAME" \
            gitAuthorEmail="$GIT_AUTHOR_EMAIL" \
            gitToken="$GIT_TOKEN" \
            gitCloneUrl="$GIT_CLONE_URL" \
            mongoAdminPassword="$MONGO_ADMIN_PASSWORD" \
          --output json > deployment-output.json

        APP_URL=$(jq -r '.properties.outputs.containerAppUrl.value' deployment-output.json)
        PRINCIPAL_ID=$(jq -r '.properties.outputs.containerAppPrincipalId.value' deployment-output.json)
        APP_NAME=$(jq -r '.properties.outputs.containerAppName.value' deployment-output.json)
        COSMOS_NAME=$(jq -r '.properties.outputs.cosmosMongoClusterName.value' deployment-output.json)

        echo "containerAppUrl=$APP_URL" >> $GITHUB_OUTPUT
        echo "containerAppPrincipalId=$PRINCIPAL_ID" >> $GITHUB_OUTPUT
        echo "containerAppName=$APP_NAME" >> $GITHUB_OUTPUT
        echo "cosmosDbAccountName=$COSMOS_NAME" >> $GITHUB_OUTPUT

        echo "✅ Deployment completed successfully"
        echo "   Application URL: $APP_URL"
        echo "   Container App: $APP_NAME"
        echo "   Cosmos DB: $COSMOS_NAME"
        echo "   Auto scale-to-zero: ~2-5 minutes of inactivity (platform-managed)"

    - name: Assign Azure roles to Managed Identity (Fallback)
      if: steps.deploy-all.outputs.containerAppPrincipalId != '' && steps.deploy-all.outputs.containerAppPrincipalId != 'null'
      continue-on-error: true
      env:
        PRINCIPAL_ID: ${{ steps.deploy-all.outputs.containerAppPrincipalId }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
        COSMOS_NAME: ${{ steps.deploy-all.outputs.cosmosDbAccountName }}
      run: |
        echo "🔐 Verifying Azure role assignments (Bicep may have already assigned these)..."

        # Assign Reader role to resource group
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Reader" \
          --resource-group "$RESOURCE_GROUP" 2>&1 | tee /tmp/role-reader.log | grep -qi "already exists"; then
          echo "ℹ️  Reader role already assigned to resource group"
        elif grep -qi "Created role assignment" /tmp/role-reader.log; then
          echo "✅ Assigned Reader role to resource group"
        else
          echo "⚠️  Could not assign Reader role (may require User Access Administrator permission)"
          cat /tmp/role-reader.log
        fi

        # Assign Monitoring Reader role to resource group
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Monitoring Reader" \
          --resource-group "$RESOURCE_GROUP" 2>&1 | tee /tmp/role-monitoring.log | grep -qi "already exists"; then
          echo "ℹ️  Monitoring Reader role already assigned to resource group"
        elif grep -qi "Created role assignment" /tmp/role-monitoring.log; then
          echo "✅ Assigned Monitoring Reader role to resource group"
        else
          echo "⚠️  Could not assign Monitoring Reader role (may require User Access Administrator permission)"
          cat /tmp/role-monitoring.log
        fi

        # Assign Cost Management Reader role to subscription
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Cost Management Reader" \
          --scope "/subscriptions/${{ env.SUBSCRIPTION_ID }}" 2>&1 | tee /tmp/role-cost.log | grep -qi "already exists"; then
          echo "ℹ️  Cost Management Reader role already assigned to subscription"
        elif grep -qi "Created role assignment" /tmp/role-cost.log; then
          echo "✅ Assigned Cost Management Reader role to subscription"
        else
          echo "⚠️  Could not assign Cost Management Reader role (may require User Access Administrator permission)"
          cat /tmp/role-cost.log
        fi

        echo ""
        echo "✅ Role assignment verification completed"
        echo "   Monitoring Reader at resource group scope provides access to all resource metrics, including Cosmos DB."
        echo "   If roles were already assigned by Bicep, the app is ready to use."
        echo "   If warnings appeared, ensure the service principal has User Access Administrator permission."

    - name: Cleanup secrets
      if: always()
      run: rm -f infra/secrets.json

    - name: Output application URL
      run: |
        echo "Application deployed to: ${{ steps.deploy-all.outputs.containerAppUrl }}"
