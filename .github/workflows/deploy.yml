name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - release
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure federated identity credentials for OIDC
      env:
        AZURE_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        CLIENT_ID=$(echo "$AZURE_CREDS" | jq -r '.clientId')

        echo "Setting up federated credential for master branch..."
        az ad app federated-credential create \
          --id "$CLIENT_ID" \
          --parameters "{\"name\":\"github-actions-master\",\"issuer\":\"https://token.actions.githubusercontent.com\",\"subject\":\"repo:${{ github.repository }}:ref:refs/heads/master\",\"audiences\":[\"api://AzureADTokenExchange\"]}" \
          2>&1 | grep -v "already exists" || echo "Federated credential for master already exists or created"

        echo "Setting up federated credential for release branch..."
        az ad app federated-credential create \
          --id "$CLIENT_ID" \
          --parameters "{\"name\":\"github-actions-release\",\"issuer\":\"https://token.actions.githubusercontent.com\",\"subject\":\"repo:${{ github.repository }}:ref:refs/heads/release\",\"audiences\":[\"api://AzureADTokenExchange\"]}" \
          2>&1 | grep -v "already exists" || echo "Federated credential for release already exists or created"

        echo "✅ Federated identity credentials configured"

    - name: Extract subscription ID from Azure credentials
      env:
        AZURE_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
      run: |
        SUBSCRIPTION_ID=$(echo "$AZURE_CREDS" | jq -r '.subscriptionId')
        echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV

    - name: Extract parameters for resource group creation
      id: extract-params
      env:
        NAME_PREFIX_OVERRIDE: ${{ vars.NAME_PREFIX || '' }}
        LOCATION_OVERRIDE: ${{ vars.LOCATION || '' }}
      run: |
        # Use environment variable if set, otherwise read from parameters.json
        if [ -n "$NAME_PREFIX_OVERRIDE" ]; then
          NAME_PREFIX="$NAME_PREFIX_OVERRIDE"
          echo "Using NAME_PREFIX from environment variable: $NAME_PREFIX"
        else
          NAME_PREFIX=$(jq -r '.parameters.namePrefix.value' infra/parameters.json)
          echo "Using NAME_PREFIX from parameters.json: $NAME_PREFIX"
        fi

        if [ -n "$LOCATION_OVERRIDE" ]; then
          LOCATION="$LOCATION_OVERRIDE"
          echo "Using LOCATION from environment variable: $LOCATION"
        else
          LOCATION=$(jq -r '.parameters.location.value' infra/parameters.json)
          echo "Using LOCATION from parameters.json: $LOCATION"
        fi

        # Validate required parameters
        if [ -z "$NAME_PREFIX" ] || [ "$NAME_PREFIX" = "null" ]; then
          echo "Error: namePrefix is required in parameters.json"
          exit 1
        fi
        if [ -z "$LOCATION" ] || [ "$LOCATION" = "null" ]; then
          echo "Error: location is required in parameters.json"
          exit 1
        fi

        REGISTRY_REPOSITORY=$(jq -r '.parameters.containerRegistryRepository.value // empty' infra/parameters.json 2>/dev/null)
        REGISTRY_SERVER=$(jq -r '.parameters.containerRegistryServer.value // empty' infra/parameters.json 2>/dev/null)
        if [ "$REGISTRY_REPOSITORY" = "null" ]; then
          REGISTRY_REPOSITORY=""
        fi
        if [ -z "$REGISTRY_REPOSITORY" ]; then
          REGISTRY_REPOSITORY="${GITHUB_REPOSITORY}"
          REGISTRY_REPOSITORY=$(echo "$REGISTRY_REPOSITORY" | tr '[:upper:]' '[:lower:]')
        fi
        if [ "$REGISTRY_SERVER" = "null" ] || [ -z "$REGISTRY_SERVER" ]; then
          REGISTRY_SERVER="ghcr.io"
        fi

        IMAGE_NAME="${NAME_PREFIX}-app"
        echo "name-prefix=$NAME_PREFIX" >> $GITHUB_OUTPUT
        echo "location=$LOCATION" >> $GITHUB_OUTPUT
        echo "resource-group=rg-${NAME_PREFIX}" >> $GITHUB_OUTPUT
        echo "container-registry-repository=$REGISTRY_REPOSITORY" >> $GITHUB_OUTPUT
        echo "container-registry-server=$REGISTRY_SERVER" >> $GITHUB_OUTPUT
        echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ steps.extract-params.outputs.resource-group }} \
          --location ${{ steps.extract-params.outputs.location }}

    - name: Create secrets JSON from app secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        if [ -z "$APP_SECRETS_JSON" ]; then
          echo "Error: APP_SECRETS secret is not set"
          exit 1
        fi
        echo "$APP_SECRETS_JSON" > infra/secrets.json

        # Validate JSON structure
        if ! jq -e '.googleClientId' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientId'"
          exit 1
        fi
        if ! jq -e '.googleClientSecret' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'googleClientSecret'"
          exit 1
        fi
        if ! jq -e '.initialUserEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'initialUserEmail'"
          exit 1
        fi
        if ! jq -e '.mongoAdminPassword' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'mongoAdminPassword'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorName' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorName'"
          exit 1
        fi
        if ! jq -e '.gitSettings.authorEmail' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.authorEmail'"
          exit 1
        fi
        if ! jq -e '.gitSettings.token' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.token'"
          exit 1
        fi
        if ! jq -e '.gitSettings.cloneUrl' infra/secrets.json > /dev/null; then
          echo "Error: APP_SECRETS must contain 'gitSettings.cloneUrl'"
          exit 1
        fi
        echo "All required secrets validated"

    - name: Extract secrets for Bicep parameters
      id: extract-secrets
      env:
        APP_SECRETS_JSON: ${{ secrets.APP_SECRETS }}
      run: |
        echo "google-client-id=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientId')" >> $GITHUB_OUTPUT
        echo "google-client-secret=$(echo "$APP_SECRETS_JSON" | jq -r '.googleClientSecret')" >> $GITHUB_OUTPUT
        echo "initial-user-email=$(echo "$APP_SECRETS_JSON" | jq -r '.initialUserEmail')" >> $GITHUB_OUTPUT
        echo "mongo-admin-password=$(echo "$APP_SECRETS_JSON" | jq -r '.mongoAdminPassword')" >> $GITHUB_OUTPUT
        echo "git-author-name=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorName')" >> $GITHUB_OUTPUT
        echo "git-author-email=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.authorEmail')" >> $GITHUB_OUTPUT
        echo "git-token=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.token')" >> $GITHUB_OUTPUT
        echo "git-clone-url=$(echo "$APP_SECRETS_JSON" | jq -r '.gitSettings.cloneUrl')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker build --no-cache -f FestivalManagementWeb/Dockerfile -t ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} .

    - name: Login to container registry
      run: |
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        if [ "$REGISTRY" = "ghcr.io" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "$REGISTRY" --username "${{ github.actor }}" --password-stdin
        else
          echo "Error: Only GHCR (ghcr.io) is supported as container registry"
          exit 1
        fi

    - name: Push Docker image
      run: |
        REPOSITORY="${{ steps.extract-params.outputs.container-registry-repository }}"
        REGISTRY="${{ steps.extract-params.outputs.container-registry-server }}"
        TARGET_IMAGE="$REGISTRY/$REPOSITORY"
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:${{ github.sha }}
        docker tag ${{ steps.extract-params.outputs.image-name }}:${{ github.sha }} $TARGET_IMAGE:latest
        docker push $TARGET_IMAGE:${{ github.sha }}
        docker push $TARGET_IMAGE:latest

    - name: Make package public (if GH_PAT configured)
      run: |
        if [ -z "${{ secrets.GH_PAT }}" ]; then
          echo "⚠️  GH_PAT secret not configured - skipping package visibility update"
          exit 0
        fi

        REPO_FULL="${{ steps.extract-params.outputs.container-registry-repository }}"
        OWNER=$(echo "$REPO_FULL" | cut -d'/' -f1)
        PACKAGE_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)

        echo "Setting package visibility to public..."

        # Try organization first, then user
        if curl -s -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME" \
          -d '{"visibility":"public"}' | grep -q '"visibility":"public"'; then
          echo "✅ Package set to public (organization)"
        elif curl -s -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" \
          -d '{"visibility":"public"}' | grep -q '"visibility":"public"'; then
          echo "✅ Package set to public (user)"
        else
          echo "⚠️  Could not set package visibility automatically"
        fi

    - name: Deploy infrastructure only (Cosmos DB + Environment)
      id: deploy-infrastructure
      env:
        NAME_PREFIX: ${{ steps.extract-params.outputs.name-prefix }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
        LOCATION: ${{ steps.extract-params.outputs.location }}
        MONGO_ADMIN_PASSWORD: ${{ steps.extract-secrets.outputs.mongo-admin-password }}
      run: |
        set -euo pipefail

        ENV_NAME="${NAME_PREFIX}-env"
        COSMOS_NAME="${NAME_PREFIX}-cosmos"

        # Check if infrastructure already exists
        ENV_EXISTS=false
        COSMOS_EXISTS=false

        if az containerapp env show --name "$ENV_NAME" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
          echo "✅ Container Apps Environment already exists: $ENV_NAME"
          ENV_EXISTS=true
        fi

        if az cosmosdb mongocluster show --cluster-name "$COSMOS_NAME" --resource-group "$RESOURCE_GROUP" &>/dev/null 2>&1; then
          echo "✅ Cosmos DB already exists: $COSMOS_NAME"
          COSMOS_EXISTS=true
        fi

        # Determine what to create
        CREATE_NEW_ENVIRONMENT=false
        CREATE_NEW_COSMOS=false

        if [ "$ENV_EXISTS" = false ]; then
          CREATE_NEW_ENVIRONMENT=true
          echo "Will create new Container Apps Environment"
        fi

        if [ "$COSMOS_EXISTS" = false ]; then
          CREATE_NEW_COSMOS=true
          echo "Will create new Cosmos DB"
        fi

        # Deploy infrastructure
        echo "Deploying infrastructure..."
        az deployment group create \
          --name "infra-${{ github.run_number }}-${{ github.run_attempt }}" \
          --resource-group "$RESOURCE_GROUP" \
          --template-file infra/infrastructure.bicep \
          --parameters namePrefix="$NAME_PREFIX" \
          --parameters location="$LOCATION" \
          --parameters mongoAdminPassword="$MONGO_ADMIN_PASSWORD" \
          --parameters createNewEnvironment=$CREATE_NEW_ENVIRONMENT \
          --parameters createNewCosmosDb=$CREATE_NEW_COSMOS \
          --output json > infra-output.json

        ENV_ID=$(jq -r '.properties.outputs.environmentId.value' infra-output.json)

        echo "environmentId=$ENV_ID" >> $GITHUB_OUTPUT
        echo "cosmosDbAccountName=$COSMOS_NAME" >> $GITHUB_OUTPUT
        echo "✅ Infrastructure deployment completed"

    - name: Deploy Container App
      id: deploy-app
      env:
        NAME_PREFIX: ${{ steps.extract-params.outputs.name-prefix }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
        LOCATION: ${{ steps.extract-params.outputs.location }}
        ENVIRONMENT_ID: ${{ steps.deploy-infrastructure.outputs.environmentId }}
        COSMOS_NAME: ${{ steps.deploy-infrastructure.outputs.cosmosDbAccountName }}
        CONTAINER_REGISTRY_SERVER: ${{ steps.extract-params.outputs.container-registry-server }}
        CONTAINER_REGISTRY_REPOSITORY: ${{ steps.extract-params.outputs.container-registry-repository }}
        REGISTRY_USERNAME: ${{ github.actor }}
        REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        MONGO_ADMIN_PASSWORD: ${{ steps.extract-secrets.outputs.mongo-admin-password }}
        GOOGLE_CLIENT_ID: ${{ steps.extract-secrets.outputs.google-client-id }}
        GOOGLE_CLIENT_SECRET: ${{ steps.extract-secrets.outputs.google-client-secret }}
        INITIAL_USER_EMAIL: ${{ steps.extract-secrets.outputs.initial-user-email }}
        GIT_AUTHOR_NAME: ${{ steps.extract-secrets.outputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ steps.extract-secrets.outputs.git-author-email }}
        GIT_TOKEN: ${{ steps.extract-secrets.outputs.git-token }}
        GIT_CLONE_URL: ${{ steps.extract-secrets.outputs.git-clone-url }}
      run: |
        set -euo pipefail

        APP_NAME="${NAME_PREFIX}-app"
        IMAGE_TAG="latest"
        IMAGE_REF="${CONTAINER_REGISTRY_SERVER}/${CONTAINER_REGISTRY_REPOSITORY}:${IMAGE_TAG}"
        REGISTRY_USERNAME_LOWER=$(echo "$REGISTRY_USERNAME" | tr '[:upper:]' '[:lower:]')

        # Check if app exists
        APP_EXISTS=false
        if az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
          APP_EXISTS=true
          echo "Container App already exists, will update it"
        fi

        # Prepare MongoDB connection string
        ENCODED_PASSWORD=$(printf %s "$MONGO_ADMIN_PASSWORD" | jq -sRr @uri)
        MONGO_CONN="mongodb+srv://mongoAdmin:${ENCODED_PASSWORD}@${COSMOS_NAME}.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000"

        if [ "$APP_EXISTS" = false ]; then
          echo "Creating Container App with az containerapp create..."
          az containerapp create \
            --name "$APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --environment "$ENVIRONMENT_ID" \
            --image "$IMAGE_REF" \
            --target-port 8080 \
            --ingress external \
            --registry-server "$CONTAINER_REGISTRY_SERVER" \
            --registry-username "$REGISTRY_USERNAME_LOWER" \
            --registry-password "$REGISTRY_PASSWORD" \
            --cpu 0.5 \
            --memory 1.0Gi \
            --min-replicas 0 \
            --max-replicas 1 \
            --system-assigned \
            --secrets \
              mongo-connection-string="$MONGO_CONN" \
              google-client-id="$GOOGLE_CLIENT_ID" \
              google-client-secret="$GOOGLE_CLIENT_SECRET" \
              initial-user-email="$INITIAL_USER_EMAIL" \
              git-token="$GIT_TOKEN" \
              git-clone-url="$GIT_CLONE_URL" \
            --env-vars \
              ASPNETCORE_ENVIRONMENT=Production \
              MongoDbSettings__ConnectionString=secretref:mongo-connection-string \
              MongoDbSettings__DatabaseName=FestivalManagement \
              Authentication__Google__ClientId=secretref:google-client-id \
              Authentication__Google__ClientSecret=secretref:google-client-secret \
              InitialUser__Email=secretref:initial-user-email \
              GitSettings__RemoteName=origin \
              GitSettings__AuthorName="$GIT_AUTHOR_NAME" \
              GitSettings__AuthorEmail="$GIT_AUTHOR_EMAIL" \
              GitSettings__Token=secretref:git-token \
              GitSettings__CloneUrl=secretref:git-clone-url
        else
          echo "Updating existing Container App..."
          az containerapp update \
            --name "$APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --image "$IMAGE_REF" \
            --cpu 0.5 \
            --memory 1.0Gi
        fi

        # Add FreeTier and AzureUsage environment variables
        echo "Adding FreeTier configuration..."
        SUBSCRIPTION_ID=$(az account show --query id -o tsv)

        az containerapp update \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --set-env-vars \
            FreeTier__EnableBanner=true \
            FreeTier__BudgetVcpuSeconds=180000 \
            FreeTier__BudgetGiBSeconds=360000 \
            FreeTier__Resource__VcpuPerReplica=0.5 \
            FreeTier__Resource__MemoryGiBPerReplica=1.0 \
            FreeTier__Resource__ReplicaFactor=1 \
            FreeTier__EnforceRequestDailyCap=false \
            FreeTier__Data__BudgetGb=100 \
            FreeTier__Requests__Budget=2000000 \
            FreeTier__Cosmos__Enabled=true \
            FreeTier__Cosmos__SubscriptionId=$SUBSCRIPTION_ID \
            FreeTier__Cosmos__ResourceGroup=$RESOURCE_GROUP \
            FreeTier__Cosmos__AccountName=$COSMOS_NAME \
            FreeTier__Cosmos__DatabaseName=FestivalManagement \
            FreeTier__Cosmos__AccountResourceId=/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DocumentDB/mongoClusters/$COSMOS_NAME \
            FreeTier__Cosmos__Provisioning=vCore \
            FreeTier__Cosmos__FreeTierStorageGb=32 \
            FreeTier__Cosmos__FreeTierVCoreStorageGb=32 \
            FreeTier__Cosmos__WarnRuPercent=90 \
            FreeTier__Cosmos__WarnStoragePercent=90 \
            FreeTier__Cosmos__RefreshMinutes=60 \
            FreeTier__Cosmos__CollectionNames__0=TextKeyValues \
            FreeTier__Cosmos__CollectionNames__1=ImageKeyValues \
            AzureUsage__Enabled=true \
            AzureUsage__ContainerAppName=$APP_NAME \
            AzureUsage__ResourceGroup=$RESOURCE_GROUP \
            AzureUsage__SubscriptionId=$SUBSCRIPTION_ID \
            AzureUsage__MetricsRefreshMinutes=10 \
            AzureUsage__CostRefreshMinutes=360

        # Get outputs
        APP_URL=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.configuration.ingress.fqdn" -o tsv)
        PRINCIPAL_ID=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --query "identity.principalId" -o tsv)

        echo "containerAppUrl=https://$APP_URL" >> $GITHUB_OUTPUT
        echo "containerAppPrincipalId=$PRINCIPAL_ID" >> $GITHUB_OUTPUT
        echo "containerAppName=$APP_NAME" >> $GITHUB_OUTPUT

        echo "✅ Container App deployment completed"
        echo "   Application URL: https://$APP_URL"

    - name: Configure scale settings (300 second cooldown)
      env:
        APP_NAME: ${{ steps.deploy-app.outputs.containerAppName }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
      run: |
        echo "Attempting to configure scale-to-zero with 300 second cooldown..."

        # Try to update scale rule with cooldown period
        SCALE_LOG=$(mktemp)

        # Method 1: Try updating with --scale-rule-metadata
        echo "Method 1: Updating scale rule metadata..."
        if az containerapp update \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --scale-rule-name http-rule \
          --scale-rule-type http \
          --scale-rule-http-concurrency 30 \
          --scale-rule-metadata cooldownPeriod=300 pollingInterval=30 \
          --min-replicas 0 \
          --max-replicas 1 \
          > "$SCALE_LOG" 2>&1; then
          echo "✅ Scale rule updated with cooldown metadata"
          cat "$SCALE_LOG"
        else
          echo "⚠️  Method 1 failed, trying alternative..."
          cat "$SCALE_LOG"

          # Method 2: Try az rest API directly
          echo "Method 2: Using Azure REST API..."
          APP_ID=$(az containerapp show --name "$APP_NAME" --resource-group "$RESOURCE_GROUP" --query id -o tsv)

          if az rest \
            --method patch \
            --uri "${APP_ID}?api-version=2024-03-01" \
            --body '{
              "properties": {
                "template": {
                  "scale": {
                    "minReplicas": 0,
                    "maxReplicas": 1,
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "30"
                          }
                        }
                      }
                    ],
                    "cooldownPeriod": 300,
                    "pollingInterval": 30
                  }
                }
              }
            }' \
            > "$SCALE_LOG" 2>&1; then
            echo "✅ Scale settings updated via REST API"
            cat "$SCALE_LOG"
          else
            echo "⚠️  Method 2 also failed"
            cat "$SCALE_LOG"
            echo "ℹ️  Falling back to default behavior (~2-5 minutes)"
          fi
        fi

        rm -f "$SCALE_LOG"

        # Show current scale configuration
        echo ""
        echo "Current scale configuration:"
        az containerapp show \
          --name "$APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.template.scale" \
          -o json || true

    - name: Assign Azure roles to Managed Identity (Fallback)
      if: steps.deploy-app.outputs.containerAppPrincipalId != '' && steps.deploy-app.outputs.containerAppPrincipalId != 'null'
      continue-on-error: true
      env:
        PRINCIPAL_ID: ${{ steps.deploy-app.outputs.containerAppPrincipalId }}
        RESOURCE_GROUP: ${{ steps.extract-params.outputs.resource-group }}
        COSMOS_NAME: ${{ steps.deploy-infrastructure.outputs.cosmosDbAccountName }}
      run: |
        echo "🔐 Verifying Azure role assignments (Bicep may have already assigned these)..."

        # Assign Reader role to resource group
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Reader" \
          --resource-group "$RESOURCE_GROUP" 2>&1 | tee /tmp/role-reader.log | grep -qi "already exists"; then
          echo "ℹ️  Reader role already assigned to resource group"
        elif grep -qi "Created role assignment" /tmp/role-reader.log; then
          echo "✅ Assigned Reader role to resource group"
        else
          echo "⚠️  Could not assign Reader role (may require User Access Administrator permission)"
          cat /tmp/role-reader.log
        fi

        # Assign Monitoring Reader role to resource group
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Monitoring Reader" \
          --resource-group "$RESOURCE_GROUP" 2>&1 | tee /tmp/role-monitoring.log | grep -qi "already exists"; then
          echo "ℹ️  Monitoring Reader role already assigned to resource group"
        elif grep -qi "Created role assignment" /tmp/role-monitoring.log; then
          echo "✅ Assigned Monitoring Reader role to resource group"
        else
          echo "⚠️  Could not assign Monitoring Reader role (may require User Access Administrator permission)"
          cat /tmp/role-monitoring.log
        fi

        # Assign Cost Management Reader role to subscription
        if az role assignment create \
          --assignee-object-id "$PRINCIPAL_ID" \
          --assignee-principal-type ServicePrincipal \
          --role "Cost Management Reader" \
          --scope "/subscriptions/${{ env.SUBSCRIPTION_ID }}" 2>&1 | tee /tmp/role-cost.log | grep -qi "already exists"; then
          echo "ℹ️  Cost Management Reader role already assigned to subscription"
        elif grep -qi "Created role assignment" /tmp/role-cost.log; then
          echo "✅ Assigned Cost Management Reader role to subscription"
        else
          echo "⚠️  Could not assign Cost Management Reader role (may require User Access Administrator permission)"
          cat /tmp/role-cost.log
        fi

        echo ""
        echo "✅ Role assignment verification completed"
        echo "   Monitoring Reader at resource group scope provides access to all resource metrics, including Cosmos DB."
        echo "   If roles were already assigned by Bicep, the app is ready to use."
        echo "   If warnings appeared, ensure the service principal has User Access Administrator permission."

    - name: Cleanup secrets
      if: always()
      run: rm -f infra/secrets.json

    - name: Output application URL
      run: |
        echo "Application deployed to: ${{ steps.deploy-app.outputs.containerAppUrl }}"
