@model FestivalManagementWeb.Models.CosmosFreeTierStatus
@if (Model != null)
{
    var withinFree = Model.OverallWithinFreeTier != false && Model.FreeTierActive != false;
    var showWarning = Model.ShouldWarn || !withinFree;
    var css = Model.ShouldStop ? "badge rounded-pill bg-danger" : (showWarning ? "badge rounded-pill bg-warning text-dark" : "badge rounded-pill bg-success");
    var status = Model.ShouldStop ? "制限超過" : (showWarning ? "警告" : "正常");
    var freeTierSetting = Model.FreeTierActive == true ? "無料枠有効" : (Model.FreeTierActive == false ? "無料枠無効" : "無料枠不明");
    var cosmosLabel = Model.Provisioning == FestivalManagementWeb.Models.CosmosProvisioningModel.VCore ? "Cosmos vCore" : "Cosmos";
    var capacityUrl = Url.Action("CapacityLimit", "FreeTier");
    string BuildMetric(string label, double? usedPercent)
    {
        if (!usedPercent.HasValue)
        {
            return string.Empty;
        }
        return $"{label} {usedPercent.Value:F0}%";
    }
    var storageMetric = BuildMetric("Storage", Model.StoragePercentOfLimit);
    if (string.IsNullOrEmpty(storageMetric))
    {
        storageMetric = "情報なし";
    }
    if (Model.ShouldStop)
    {
        <a class="d-flex align-items-center gap-2 cosmos-status-pill text-decoration-none" title="@($"{status} / {freeTierSetting} - {storageMetric}")" href="@capacityUrl">
            <span class="fw-semibold">@cosmosLabel</span>
            <span class="@css">@status</span>
            <span class="text-muted small">@storageMetric</span>
        </a>
    }
    else
    {
        <div class="d-flex align-items-center gap-2 cosmos-status-pill" title="@($"{status} / {freeTierSetting} - {storageMetric}")">
            <span class="fw-semibold">@cosmosLabel</span>
            <span class="@css">@status</span>
            <span class="text-muted small">@storageMetric</span>
        </div>
    }
}



